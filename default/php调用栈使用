1.问题描述：接口使用了try_catch包裹，屏蔽了报错信息，只能看到一个失败的结果

分析：
    1.现象一：全局报错，说明问题一定发生的公共方法部分，已经联想到中间件，但是中间件众多，一个一个打印又不方便
    2.框架输出接口统一，这样就好办了，只要在出口函数哪里，拿到整个请求的调用栈，就能直接定位调用输出函数的位置
    
    下面引出今天的重点函数：debug_backtrace（）
    使用流程：
      $debug_arr = debug_backtrace();
      print_r($debug_arr);die;
      
      
    output:
    array:42 [
      0 => array:7 [
        "file" => "E:\www\api.beauty.com\app\Helpers\Admin\AdminResponse.php"
        "line" => 70
        "function" => "responseApi"
        "class" => "App\Http\Middleware\ApiRequestLimit"
        "object" => ApiRequestLimit {#1076}
        "type" => "->"
        "args" => array:2 [
          0 => false
          1 => null
        ]
      ]
      1 => array:7 [
        "file" => "E:\www\api.beauty.com\app\Http\Middleware\ApiRequestLimit.php"
        "line" => 25
        "function" => "failed"
        "class" => "App\Http\Middleware\ApiRequestLimit"
        "object" => ApiRequestLimit {#1076}
        "type" => "->"
        "args" => array:1 [
          0 => false
        ]
      ]
      ...
      
      果然不出所料，就是在中间件调用的输出函数，并且清晰指出函数的文件，行数，甚至调用的方法名以及对象的，太棒啦
      然后排查业务逻辑代码，轻松加愉快的搞定!
      
 问题2：
    为什么打印出来的数据，最后调用的数据会在第一个就打印出来？
    
    分析：
        1.函数调用是一个压栈的过程，自然最新调用的函数信息会存储在栈顶，debug_backtrace()函数返回一个数组，所以一定存在一个出栈过程，所以栈顶的数据（最后调用的函数信息）会放在新数组的第一个
    位置，就产生的倒叙的效果!
    
    多思考，多发现编程的乐趣
