Question:为什么说，composer为php提供包依赖管理，那命名空间就是现代PHP组件的生态基础？
  1.前言：
  如果你只需要知道现代PHP特性中的一个，那就应该是命名空间。命名空间在PHP5.3.0中引入，其作用是按照一种虚拟的层次结构组织PHP代码，这种层次结构类似操作
  系统中文件系统的目录结构。命名空间是现代PHP组件生态的基础，现代的PHP组件框架代码都是放在各自全局唯一的厂商命名空间中，以免和其他厂商使用的常见类名冲
  突。命名空间的作用是封装和组织相关的PHP类，就像在文件系统中把相关的文件放在同一个目录中一样。PHP命名空间和操作系统的物理文件系统不同，这是一个虚拟概
  念，没必要和文件系统中的目录结构完全相同，虽然如此，但是大多数PHP组件为了兼容广泛使用的PSR-4自动加载标准，会把命名空间放到对应文件系统的子目录中。
  
  2.为什么使用命名空间？
  我们的代码可能和其他开发者的代码使用相同的类名、接口名、函数或常量名，如果不使用命名空间，名称会起冲突，导致PHP执行出错。而使用命名空间将代码放到唯一
  的厂商命名空间，我们的代码就可以和其他开发者使用相同的类名、接口名、函数或常量名。
  
  3.声明命名空间
  <?php
  namespace App\Controller\AccountController;   //必须放在第一行
  
  4.导入和使用别名
  use App\Controller\Tool\QueryController;
  为了解决存在类名过长的问题，可以使用as来处理：
  use ***\***\***\***\abcd as abcd
  
  5.自动加载：
  命名空间还为PHP-FIG制定的PSR-4自动加载标准奠定了坚实的基础，大多数现代的PHP组件都使用了这种自动加载模式，使用依赖管理器Composer可以自动加载项目的
  依赖。没有命名空间，就没有现代的PHP生态系统和基于组件的新型架构，由此可见命名空间的重要性
